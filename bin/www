#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('solid-next:server');
var http = require('http');
var WebSocketServer = require("ws").Server;
var dropbox = require('../services/dropbox');
var url = require('url');
var Client = require('../services/dropbox/Client');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create WS server
 */
var wss = new WebSocketServer({ server: server, path: "/ws" });
wss.on('connection', async function connection(ws, req) {

  ws.on('message', async function incoming(message) {
    const location = url.parse(req.url, true);
    var result = {
      "success": true,
      "message": "ok",
      "data": []
    };

    if (message == 'render') {
      var accessToken = location.query.accessToken
      console.log(`accessToken: ${accessToken}`);

      // step1 : list all files
      let list = await dropbox.listFolder(accessToken);

      // step2 : get temporary link of each file
      for (i = 0; i < list.entries.length; i++) {
        let imageObj = await dropbox.getTemporaryLink(accessToken, list.entries[i]["path_lower"]);
        result.data = [imageObj.link];
        ws.send(JSON.stringify(result)); // First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.
      }
    }
    if (message == 'renderV2') {
      var accessToken = location.query.accessToken
      var client = new Client(accessToken);
      let list = await client.listFolder('/Gallery');
      for (i = 0; i < list.entries.length; i++) {
        let imageObj = await client.getTemporaryLink(list.entries[i]["path_lower"]);
        result.data = [imageObj.link];
        ws.send(JSON.stringify(result)); // First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.
      }

    }
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
